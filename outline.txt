1. Introduction
  - Goals:
    - Set abstractions serve a different purpose than SAT/SMT/MC
      - Inference vs Entailment
      - Explicit vs Implicit control flow
      - Handling of quantifiers
      - Forward vs backward analysis
    - Modern set abstractions offer performance and precision
    - Set abstractions are useful for a wide variety of problems

2. Overview
   -> a couple of examples, showing very intuitively (possibly just with pictures)
      the need for set abstractions
   Possibly:
   - a quick picture of HOO
   - a quick picture of Huisong's work

3. Set Abstraction Problem
 -> set up problem framework / why abstract domain vs other things?
  - Boolean Algebra
    - Cardinality/Value considerations
  - Forward analysis to be use as a subcomponent of other analyses
  - Abstract domain (implicit vs explicit control flow)
  - Inference (vs BAPA)

4 Constructed set abstractions
 -> search for efficient structures and algorithms associated to them
   4.1 Lin
   4.2 QUICr
   4.3 BDD
   4.4 EQ functor
   4.5 Packing functor
     - Why packing doesn't work for BDDs in model checking, but does work here.

5. Solver-based set abstractions
 -> encode problem to traditional, known problem
   5.1 SMT
   5.2 QBF


6. Evaluation
 -> compare approaches in several classes of problems
  - Benchmark suites:
    - Python set tests
    - JSAna JavaScript verification
    - Memcad C data structure memory safety
  - Show:
    - Old set domains much slower
    - New set domains faster and often more precise
    - SMT doesn't scale in on these applications

7. Tradeoffs/Limitations
 -> limitations and possible enhancements
  - Cardinality
  - Contents

8. Related Work

9. Conclusions

